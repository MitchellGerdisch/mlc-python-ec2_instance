# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['WpInstanceArgs', 'WpInstance']

@pulumi.input_type
class WpInstanceArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 public_key: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a WpInstance resource.
        :param pulumi.Input[str] instance_type: Instance type to use for wordpress instance.
        :param pulumi.Input[str] public_key: SSH public key for accessing wordpress instance.
        :param pulumi.Input[str] subnet_id: Subnet in which to deploy.
        :param pulumi.Input[str] vpc_id: VPC in which to deploy.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Instance type to use for wordpress instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Input[str]:
        """
        SSH public key for accessing wordpress instance.
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Subnet in which to deploy.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        VPC in which to deploy.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


class WpInstance(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WpInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_type: Instance type to use for wordpress instance.
        :param pulumi.Input[str] public_key: SSH public key for accessing wordpress instance.
        :param pulumi.Input[str] subnet_id: Subnet in which to deploy.
        :param pulumi.Input[str] vpc_id: VPC in which to deploy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WpInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WpInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WpInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WpInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WpInstanceArgs.__new__(WpInstanceArgs)

            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            if public_key is None and not opts.urn:
                raise TypeError("Missing required property 'public_key'")
            __props__.__dict__["public_key"] = public_key
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["secrule_id"] = None
            __props__.__dict__["wpinstance_ip"] = None
        super(WpInstance, __self__).__init__(
            'wpinstance:mlc:WpInstance',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="secruleId")
    def secrule_id(self) -> pulumi.Output[str]:
        """
        Id for instance security group rule.
        """
        return pulumi.get(self, "secrule_id")

    @property
    @pulumi.getter(name="wpinstanceIp")
    def wpinstance_ip(self) -> pulumi.Output[str]:
        """
        The wordpress instance IP address.
        """
        return pulumi.get(self, "wpinstance_ip")

