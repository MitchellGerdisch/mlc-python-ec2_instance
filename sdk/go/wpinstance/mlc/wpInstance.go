// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mlc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WpInstance struct {
	pulumi.ResourceState

	// Id for instance security group rule.
	SecruleId pulumi.StringOutput `pulumi:"secruleId"`
	// The wordpress instance IP address.
	WpinstanceIp pulumi.StringOutput `pulumi:"wpinstanceIp"`
}

// NewWpInstance registers a new resource with the given unique name, arguments, and options.
func NewWpInstance(ctx *pulumi.Context,
	name string, args *WpInstanceArgs, opts ...pulumi.ResourceOption) (*WpInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource WpInstance
	err := ctx.RegisterRemoteComponentResource("wpinstance:mlc:WpInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type wpInstanceArgs struct {
	// Instance type to use for wordpress instance.
	InstanceType string `pulumi:"instanceType"`
	// SSH public key for accessing wordpress instance.
	PublicKey string `pulumi:"publicKey"`
	// Subnet in which to deploy.
	SubnetId string `pulumi:"subnetId"`
	// VPC in which to deploy.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a WpInstance resource.
type WpInstanceArgs struct {
	// Instance type to use for wordpress instance.
	InstanceType pulumi.StringInput
	// SSH public key for accessing wordpress instance.
	PublicKey pulumi.StringInput
	// Subnet in which to deploy.
	SubnetId pulumi.StringInput
	// VPC in which to deploy.
	VpcId pulumi.StringInput
}

func (WpInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wpInstanceArgs)(nil)).Elem()
}

type WpInstanceInput interface {
	pulumi.Input

	ToWpInstanceOutput() WpInstanceOutput
	ToWpInstanceOutputWithContext(ctx context.Context) WpInstanceOutput
}

func (*WpInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**WpInstance)(nil)).Elem()
}

func (i *WpInstance) ToWpInstanceOutput() WpInstanceOutput {
	return i.ToWpInstanceOutputWithContext(context.Background())
}

func (i *WpInstance) ToWpInstanceOutputWithContext(ctx context.Context) WpInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WpInstanceOutput)
}

// WpInstanceArrayInput is an input type that accepts WpInstanceArray and WpInstanceArrayOutput values.
// You can construct a concrete instance of `WpInstanceArrayInput` via:
//
//	WpInstanceArray{ WpInstanceArgs{...} }
type WpInstanceArrayInput interface {
	pulumi.Input

	ToWpInstanceArrayOutput() WpInstanceArrayOutput
	ToWpInstanceArrayOutputWithContext(context.Context) WpInstanceArrayOutput
}

type WpInstanceArray []WpInstanceInput

func (WpInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WpInstance)(nil)).Elem()
}

func (i WpInstanceArray) ToWpInstanceArrayOutput() WpInstanceArrayOutput {
	return i.ToWpInstanceArrayOutputWithContext(context.Background())
}

func (i WpInstanceArray) ToWpInstanceArrayOutputWithContext(ctx context.Context) WpInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WpInstanceArrayOutput)
}

// WpInstanceMapInput is an input type that accepts WpInstanceMap and WpInstanceMapOutput values.
// You can construct a concrete instance of `WpInstanceMapInput` via:
//
//	WpInstanceMap{ "key": WpInstanceArgs{...} }
type WpInstanceMapInput interface {
	pulumi.Input

	ToWpInstanceMapOutput() WpInstanceMapOutput
	ToWpInstanceMapOutputWithContext(context.Context) WpInstanceMapOutput
}

type WpInstanceMap map[string]WpInstanceInput

func (WpInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WpInstance)(nil)).Elem()
}

func (i WpInstanceMap) ToWpInstanceMapOutput() WpInstanceMapOutput {
	return i.ToWpInstanceMapOutputWithContext(context.Background())
}

func (i WpInstanceMap) ToWpInstanceMapOutputWithContext(ctx context.Context) WpInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WpInstanceMapOutput)
}

type WpInstanceOutput struct{ *pulumi.OutputState }

func (WpInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WpInstance)(nil)).Elem()
}

func (o WpInstanceOutput) ToWpInstanceOutput() WpInstanceOutput {
	return o
}

func (o WpInstanceOutput) ToWpInstanceOutputWithContext(ctx context.Context) WpInstanceOutput {
	return o
}

type WpInstanceArrayOutput struct{ *pulumi.OutputState }

func (WpInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WpInstance)(nil)).Elem()
}

func (o WpInstanceArrayOutput) ToWpInstanceArrayOutput() WpInstanceArrayOutput {
	return o
}

func (o WpInstanceArrayOutput) ToWpInstanceArrayOutputWithContext(ctx context.Context) WpInstanceArrayOutput {
	return o
}

func (o WpInstanceArrayOutput) Index(i pulumi.IntInput) WpInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WpInstance {
		return vs[0].([]*WpInstance)[vs[1].(int)]
	}).(WpInstanceOutput)
}

type WpInstanceMapOutput struct{ *pulumi.OutputState }

func (WpInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WpInstance)(nil)).Elem()
}

func (o WpInstanceMapOutput) ToWpInstanceMapOutput() WpInstanceMapOutput {
	return o
}

func (o WpInstanceMapOutput) ToWpInstanceMapOutputWithContext(ctx context.Context) WpInstanceMapOutput {
	return o
}

func (o WpInstanceMapOutput) MapIndex(k pulumi.StringInput) WpInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WpInstance {
		return vs[0].(map[string]*WpInstance)[vs[1].(string)]
	}).(WpInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WpInstanceInput)(nil)).Elem(), &WpInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*WpInstanceArrayInput)(nil)).Elem(), WpInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WpInstanceMapInput)(nil)).Elem(), WpInstanceMap{})
	pulumi.RegisterOutputType(WpInstanceOutput{})
	pulumi.RegisterOutputType(WpInstanceArrayOutput{})
	pulumi.RegisterOutputType(WpInstanceMapOutput{})
}
